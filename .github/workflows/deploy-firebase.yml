name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - '**' # Runs on all pushes to any branch
  pull_request:
    branches:
      - '**' # Runs on all pull requests to any branch
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        type: string

env:
  GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
  CHAT_API_ENDPOINT: ${{ vars.CHAT_API_ENDPOINT }}
  DEFAULT_CHAT_LOCATION: ${{ vars.DEFAULT_CHAT_LOCATION }}

jobs:
  call_reusable_build:
    uses: ./.github/workflows/reusable-build-test.yml
    with:
      node-version: '20' # Firebase workflow uses Node 20
      expo-working-directory: 'ExpoGallery'
      output-path: 'dist' # Standard output path from reusable workflow

  build_and_deploy_firebase:
    needs: call_reusable_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.call_reusable_build.outputs.build_artifact_name }}
          path: downloaded-artifact

      - name: Prepare Firebase deployment directory
        run: |
          mkdir -p site/public

          # Copy all build output to site/public
          echo "Copying build output from downloaded-artifact to site/public"
          cp -r downloaded-artifact/* site/public/

          # Verify version.json exists at the root level
          if [ ! -f "site/public/version.json" ]; then
            echo "Error: version.json not found at site/public/version.json"
            echo "Contents of site/public:"
            ls -la site/public/
            exit 1
          fi

          echo "Successfully prepared Firebase directory"
          echo "Version.json content:"
          cat site/public/version.json

      - name: Determine Firebase Channel ID
        id: channel_id
        run: |
          node ExpoGallery/scripts/getFirebaseChannelId.js
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_EVENT_NUMBER: ${{ github.event.number }}
          INPUT_BRANCH: ${{ github.event.inputs.branch }}

      - name: Replace GITHUB_SHA in about.html
        run: |
          node ExpoGallery/scripts/replaceGithubSha.js site/public/about.html "${{ github.sha }}"

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        id: firebase_deploy
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_MAPCHATAI }}
          entryPoint: ./site
          projectId: mapchatai
          channelId: ${{ steps.channel_id.outputs.channel_id }}

      - name: Debug Firebase deployment outputs
        run: |
          echo "=== Firebase deployment outputs ==="
          echo "details: '${{ steps.firebase_deploy.outputs.details }}'"
          echo "details_url: '${{ steps.firebase_deploy.outputs.details_url }}'"
          echo "expire_time: '${{ steps.firebase_deploy.outputs.expire_time }}'"

      - name: Verify deployed SHA
        run: |
          # Use the details_url directly instead of parsing from details JSON
          DEPLOYED_URL="${{ steps.firebase_deploy.outputs.details_url }}"
          VERSION_URL="${DEPLOYED_URL}/${{ needs.call_reusable_build.outputs.version_json_relative_path }}"
          EXPECTED_SHA="${{ github.sha }}"

          echo "Verifying deployment..."
          echo "Expected SHA: $EXPECTED_SHA"
          echo "Fetching deployed version from: $VERSION_URL"

          # Fetch version.json with retry logic
          DEPLOYED_SHA=""
          for i in 1 2 3 4 5; do
            HTTP_CODE=$(curl -s -L -w "%{http_code}" -o response.json "$VERSION_URL")
            if [ "$HTTP_CODE" -eq 200 ]; then
              if [ -s response.json ] && jq -e '.build != null' response.json > /dev/null; then
                DEPLOYED_SHA=$(jq -r '.build' response.json)
                if [ -n "$DEPLOYED_SHA" ]; then
                   echo "Successfully fetched deployed SHA: $DEPLOYED_SHA"
                   break
                else
                   echo "Attempt $i: Fetched 'build' field is empty."
                fi
              else
                echo "Attempt $i: Fetched content is not valid JSON or 'build' key is missing."
                echo "Response content:"
                cat response.json
              fi
            else
              echo "Attempt $i: HTTP request failed with status code $HTTP_CODE."
              echo "Response content (if any):"
              cat response.json
            fi
            echo "Retrying in 10 seconds..."
            sleep 10
          done

          if [ -z "$DEPLOYED_SHA" ] || [ "$DEPLOYED_SHA" == "null" ]; then
            echo "::error::Could not fetch or parse deployed SHA from $VERSION_URL after multiple retries."
            exit 1
          fi

          if [ "$DEPLOYED_SHA" != "$EXPECTED_SHA" ]; then
            echo "::error::Deployed SHA ($DEPLOYED_SHA) does not match expected SHA ($EXPECTED_SHA)."
            exit 1
          fi

          echo "âœ… Successfully verified deployed SHA ($DEPLOYED_SHA) on $VERSION_URL"
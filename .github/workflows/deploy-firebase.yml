# See https://github.com/FirebaseExtended/action-hosting-deploy

name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - '**' # Runs on all pushes to any branch
  pull_request:
    branches:
      - '**' # Runs on all pull requests to any branch
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        type: string

env:
  GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
  CHAT_API_ENDPOINT: ${{ vars.CHAT_API_ENDPOINT }}
  DEFAULT_CHAT_LOCATION: ${{ vars.DEFAULT_CHAT_LOCATION }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Consistent with other workflows
          cache: 'npm'
          cache-dependency-path: 'ExpoGallery/package-lock.json'

      - name: Install dependencies
        run: |
          cd ExpoGallery
          npm ci

      - name: Run tests
        run: |
          cd ExpoGallery
          npm test

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success() # Only run if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Consistent with test job
          cache: 'npm'
          cache-dependency-path: 'ExpoGallery/package-lock.json'

      - name: Install dependencies
        run: |
          cd ExpoGallery
          npm ci

      - name: Determine Firebase Channel ID
        id: channel_id
        run: |
          CHANNEL_ID=""
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            CHANNEL_ID="live"
          elif [ "${{ github.event_name }}" == "push" ]; then
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-36 | sed 's/^-*\(.*[^-]\)-*$/\1/')
            if [ -z "$BRANCH_NAME" ]; then BRANCH_NAME="preview"; fi
            CHANNEL_ID="preview-$BRANCH_NAME"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANNEL_ID="preview-pr-${{ github.event.number }}"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BRANCH_NAME=$(echo "${{ github.event.inputs.branch }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-36 | sed 's/^-*\(.*[^-]\)-*$/\1/')
            if [ "${{ github.event.inputs.branch }}" == "main" ]; then
                CHANNEL_ID="live"
            elif [ -z "$BRANCH_NAME" ]; then 
                CHANNEL_ID="preview-manual"
            else
                CHANNEL_ID="preview-$BRANCH_NAME"
            fi
          else
            echo "::error::Unknown event type or context for Firebase deployment."
            exit 1
          fi
          echo "Firebase Channel ID: $CHANNEL_ID"
          echo "channel_id=$CHANNEL_ID" >> $GITHUB_OUTPUT

      - name: Build Expo web
        run: |
          cd ExpoGallery
          npm run predeploy:root
          # The output directory needs to be relative to the entryPoint for Firebase deploy action
          npx expo export --platform web --dev --output-dir ../site/public
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Replace GITHUB_SHA in about.html and version.json
        run: |
          cd site/public
          if [ -f "about.html" ]; then
            sed -i.bak 's/GITHUB_SHA/'${GITHUB_SHA}'/g' about.html
          fi
          # Create or update version.json with the current SHA
          echo "{\"build\": \"${GITHUB_SHA}\"}" > version.json
          echo "Generated version.json with SHA: ${GITHUB_SHA}"
          cat version.json
        working-directory: . # Run from repo root so site/public path is correct

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        id: firebase_deploy
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_MAPCHATAI }}
          entryPoint: ./site # Path to the directory containing firebase.json and public/
          projectId: mapchatai
          channelId: ${{ steps.channel_id.outputs.channel_id }}

      - name: Verify deployed SHA
        env:
          CHANNEL_ID_OUTPUT: ${{ steps.channel_id.outputs.channel_id }}
          FIREBASE_PROJECT_ID: mapchatai
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          DEPLOYED_VERSION_URL=""
          if [ "$CHANNEL_ID_OUTPUT" == "live" ]; then
            DEPLOYED_VERSION_URL="https://$FIREBASE_PROJECT_ID.web.app/version.json"
          else
            DEPLOYED_VERSION_URL="https://$FIREBASE_PROJECT_ID--$CHANNEL_ID_OUTPUT.web.app/version.json"
          fi
          echo "Fetching deployed version from: $DEPLOYED_VERSION_URL"
          for i in 1 2 3 4 5; do
            HTTP_CODE=$(curl -s -w "%{http_code}" -o response.json $DEPLOYED_VERSION_URL)
            if [ "$HTTP_CODE" -eq 200 ]; then
              DEPLOYED_SHA=$(jq -r '.build' response.json)
              if [ -n "$DEPLOYED_SHA" ] && [ "$DEPLOYED_SHA" != "null" ]; then
                break
              fi
            fi
            echo "Attempt $i: Failed to fetch or parse version.json (HTTP: $HTTP_CODE). Retrying in 10 seconds..."
            sleep 10
          done
          EXPECTED_SHA="${{ github.sha }}"
          echo "Deployed SHA: $DEPLOYED_SHA"
          echo "Expected SHA: $EXPECTED_SHA"
          if [ -z "$DEPLOYED_SHA" ] || [ "$DEPLOYED_SHA" == "null" ]; then
            echo "::error::Could not fetch deployed SHA from $DEPLOYED_VERSION_URL after multiple retries."
            exit 1
          fi
          if [ "$DEPLOYED_SHA" != "$EXPECTED_SHA" ]; then
            echo "::error::Deployed SHA ($DEPLOYED_SHA) does not match expected SHA ($EXPECTED_SHA)."
            exit 1
          fi
          echo "Successfully verified deployed SHA on $DEPLOYED_VERSION_URL"
